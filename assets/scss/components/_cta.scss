@use '../abstract/variables' as *; // as pour apeller la variable par son alias directement et pas .variables.$alias
@use 'sass:color';


// Bouton principal
.bouton {
  display: inline-block;
  padding: 1rem 2rem;
  background-color: $vertForet;
  color: white;
  font-family: $police-principale;
  font-size: 18px;
  font-weight: 600;
  border: none;
  border-radius: 24px;
  text-align: center;
  text-decoration: none;
  cursor: pointer; // Le bouton deviens un pointeur main.
  transition: transform 1s ease-in-out, background-color 1s ease-in-out; // avec la virgule entre chaques effets !
  letter-spacing: 2px; // Mes lettres sont enfin plus visibles avec le font-weight 600..
  will-change: transform; // prépare le navigateur : effet plus doux au survol et retour du bouton
  &:hover {
    background-color: $vertClair;
    transform: scale(1.1);
  }
}

// Bouton secondaire minimaliste
.bouton-secondaire {
  padding: 0.75rem 0.5rem; // pour aérer un peu sans faire vrai bouton
  color: $vertForet;
  font-family: $police-principale;
  font-size: 18px;
  font-weight: 600;
  cursor: pointer;
  text-decoration: none;
  transition: color 1s ease;
  position: relative; // pour que mon pseudo-élément aille au bon endroit
  
  
  &::after {
    content: "";
    position: absolute; // mon trait apparaît grace à la position relative de son parent
    left: 0; //
    bottom: 0; // ces deux lignes permettent d'éviter un comportement étrange et fixent bien mon peseudo-élément ou on le veux. 
    height: 5px;
    width: 100%;
    background-color: $vertForet;
    transform: scaleX(0); // Pour que mon effet de soulignement aparaisse à 0..
    transform-origin: center;
    transition: transform 1s ease, background-color 1s ease;
  }

  &:hover { // éclaircit le texte
    color: $vertClair;

    &::after {
      transform: scaleX(1); // il fait toute sa taille après la seconde ;)
      background-color: $vertClair;
    }
  }
}

